"""
FastAPI Football Scouting App (Talent Video Uploads)
---------------------------------------------------
A single-file FastAPI app that lets players upload football (soccer) skill videos
and lets scouts browse, search, and watch them.

Features
- Upload MP4/MOV/WEBM videos with metadata (player name, position, title, description)
- Store files locally under ./uploads and metadata in SQLite (./scouting.db)
- Browse & search videos on the home page
- Watch individual videos on a detail page
- Simple, clean HTML (Jinja2) templates autogenerated on first run

Run locally
1) Install deps:
   pip install fastapi uvicorn jinja2 sqlalchemy aiofiles python-multipart

2) Start the server:
   uvicorn main:app --reload

3) Open in your browser:
   http://127.0.0.1:8000/

Security & production notes
- This is a minimal MVP. Add authentication, rate limits, file scanning, size limits, and a CDN/S3 storage for production.
- Validate video content and consider transcoding (e.g., with FFmpeg) for consistent playback.

"""

import os
import shutil
import sqlite3
from datetime import datetime
from pathlib import Path
from typing import Optional, List

from fastapi import FastAPI, Request, UploadFile, File, Form, HTTPException
from fastapi.responses import RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from starlette.status import HTTP_302_FOUND
from jinja2 import Environment, FileSystemLoader, select_autoescape

# -------------------------
# Paths & setup
# -------------------------
BASE_DIR = Path(__file__).parent
UPLOAD_DIR = BASE_DIR / "uploads"
TEMPLATES_DIR = BASE_DIR / "templates"
STATIC_DIR = BASE_DIR / "static"
DB_PATH = BASE_DIR / "scouting.db"

for p in [UPLOAD_DIR, TEMPLATES_DIR, STATIC_DIR]:
    p.mkdir(parents=True, exist_ok=True)

# -------------------------
# Autogenerate templates if missing (very simple, Tailwind-free MVP)
# -------------------------
base_html = """<!DOCTYPE html>
<html lang=\"en\">
<head>
  <meta charset=\"UTF-8\" />
  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />
  <title>{% block title %}Football Scouting{% endblock %}</title>
  <style>
    :root { --bg:#0b132b; --card:#1c2541; --accent:#5bc0be; --muted:#3a506b; --text:#e0e0e0; }
    * { box-sizing: border-box; }
    body { margin:0; font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, 'Helvetica Neue', Arial; background:var(--bg); color:var(--text); }
    a { color: var(--accent); text-decoration: none; }
    header { padding: 16px 24px; display:flex; align-items:center; gap:16px; background: var(--card); position: sticky; top:0; z-index:10; }
    header a.brand { font-weight: 700; letter-spacing: .5px; }
    header nav { margin-left:auto; display:flex; gap:12px; }
    .container { max-width: 1100px; margin: 0 auto; padding: 24px; }
    .card { background: var(--card); border-radius: 16px; padding: 16px; box-shadow: 0 10px 24px rgba(0,0,0,.25); }
    .grid { display:grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap:16px; }
    .muted { color:#c7d0d9; opacity:.85; }
    .btn { background: var(--accent); color:#0b132b; border:none; padding:10px 14px; border-radius:10px; font-weight:600; cursor:pointer; }
    .btn.secondary { background: var(--muted); color:#fff; }
    input, select, textarea { width:100%; padding:10px 12px; border-radius: 10px; border:1px solid #2a3956; background:#0f1a36; color:#fff; }
    label { font-size: 14px; color:#cfe7e6; }
    form .row { display:grid; grid-template-columns: repeat(2, 1fr); gap: 12px; }
    form .row-1 { display:grid; grid-template-columns: 1fr; gap: 12px; }
    .video-card video { width: 100%; border-radius:12px; background:#000; }
    footer { text-align:center; padding: 24px; color:#9fb0be; }
  </style>
</head>
<body>
  <header>
    <a class=\"brand\" href=\"/\">⚽ Football Scouting</a>
    <nav>
      <a href=\"/upload\" class=\"btn secondary\">Upload Talent</a>
    </nav>
  </header>
  <main class=\"container\">
    {% block content %}{% endblock %}
  </main>
  <footer>
    Built with FastAPI · Demo MVP
  </footer>
</body>
</html>
"""

index_html = """{% extends 'base.html' %}
{% block title %}Discover Talent · Football Scouting{% endblock %}
{% block content %}
  <div class=\"card\" style=\"margin-bottom:16px\">
    <form method=\"get\" action=\"/\" class=\"row\">
      <div>
        <label for=\"q\">Search by player or title</label>
        <input type=\"text\" id=\"q\" name=\"q\" value=\"{{ q or '' }}\" placeholder=\"e.g., John, dribbling, speed\" />
      </div>
      <div>
        <label for=\"position\">Position</label>
        <select id=\"position\" name=\"position\">
          <option value=\"\">Any</option>
          {% for p in positions %}
          <option value=\"{{p}}\" {% if position==p %}selected{% endif %}>{{p}}</option>
          {% endfor %}
        </select>
      </div>
      <div style=\"display:flex; align-items:flex-end;\">
        <button class=\"btn\" type=\"submit\">Search</button>
      </div>
    </form>
  </div>

  {% if videos %}
  <div class=\"grid\">
    {% for v in videos %}
    <a class=\"card video-card\" href=\"/videos/{{ v['id'] }}\" style=\"display:block\">
      <video src=\"/uploads/{{ v['filename'] }}#t=0.1\" preload=\"metadata\"></video>
      <h3>{{ v['title'] }}</h3>
      <p class=\"muted\">{{ v['player_name'] }} · {{ v['position'] }} · {{ v['created_at'] }}</p>
      <p>{{ v['description'][:120] }}{% if v['description']|length > 120 %}…{% endif %}</p>
    </a>
    {% endfor %}
  </div>
  {% else %}
  <div class=\"card\">
    <p>No videos yet. Be the first to <a href=\"/upload\">upload your skills</a>!</p>
  </div>
  {% endif %}
{% endblock %}
"""

upload_html = """{% extends 'base.html' %}
{% block title %}Upload Talent · Football Scouting{% endblock %}
{% block content %}
  <h2 style=\"margin-top:0\">Upload Your Skills</h2>
  <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\" class=\"row-1\">
    <div class=\"row\">
      <div>
        <label for=\"player_name\">Player Name</label>
        <input required type=\"text\" id=\"player_name\" name=\"player_name\" />
      </div>
      <div>
        <label for=\"position\">Position</label>
        <select required id=\"position\" name=\"position\">
          {% for p in positions %}
          <option value=\"{{p}}\">{{p}}</option>
          {% endfor %}
        </select>
      </div>
    </div>

    <div class=\"row\">
      <div>
        <label for=\"title\">Video Title</label>
        <input required type=\"text\" id=\"title\" name=\"title\" />
      </div>
      <div>
        <label for=\"video\">Video File (MP4/MOV/WEBM, max 200MB)</label>
        <input required type=\"file\" id=\"video\" name=\"video\" accept=\"video/mp4,video/quicktime,video/webm\" />
      </div>
    </div>

    <div>
      <label for=\"description\">Short Description</label>
      <textarea id=\"description\" name=\"description\" rows=\"4\" placeholder=\"e.g., Dribbling highlights, 100m sprint, free kick compilation\"></textarea>
    </div>

    <div>
      <button class=\"btn\" type=\"submit\">Upload</button>
      <a href=\"/\" class=\"btn secondary\" style=\"margin-left:8px\">Cancel</a>
    </div>
  </form>
{% endblock %}
"""

video_html = """{% extends 'base.html' %}
{% block title %}{{ video['title'] }} · Football Scouting{% endblock %}
{% block content %}
  <div class=\"card\" style=\"margin-bottom:16px\">
    <h2 style=\"margin-top:0\">{{ video['title'] }}</h2>
    <p class=\"muted\">{{ video['player_name'] }} · {{ video['position'] }} · {{ video['created_at'] }}</p>
    <video src=\"/uploads/{{ video['filename'] }}\" controls style=\"width:100%; border-radius:12px; background:#000\"></video>
    {% if video['description'] %}
      <p style=\"margin-top:12px\">{{ video['description'] }}</p>
    {% endif %}
    <div style=\"margin-top:12px\">
      <a class=\"btn secondary\" href=\"/\">← Back</a>
    </div>
  </div>
{% endblock %}
"""

# Write templates once if missing
if not (TEMPLATES_DIR / "base.html").exists():
    (TEMPLATES_DIR / "base.html").write_text(base_html, encoding="utf-8")
if not (TEMPLATES_DIR / "index.html").exists():
    (TEMPLATES_DIR / "index.html").write_text(index_html, encoding="utf-8")
if not (TEMPLATES_DIR / "upload.html").exists():
    (TEMPLATES_DIR / "upload.html").write_text(upload_html, encoding="utf-8")
if not (TEMPLATES_DIR / "video.html").exists():
    (TEMPLATES_DIR / "video.html").write_text(video_html, encoding="utf-8")

# -------------------------
# Jinja2 environment
# -------------------------
jinja_env = Environment(
    loader=FileSystemLoader(str(TEMPLATES_DIR)),
    autoescape=select_autoescape(["html", "xml"]),
)

def render_template(name: str, **context):
    template = jinja_env.get_template(name)
    return template.render(**context)

# -------------------------
# Database helpers (SQLite)
# -------------------------

def db_init():
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute(
            """
            CREATE TABLE IF NOT EXISTS videos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                player_name TEXT NOT NULL,
                position TEXT NOT NULL,
                title TEXT NOT NULL,
                description TEXT,
                filename TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        conn.commit()

def db_query(sql: str, params: tuple = ()) -> List[sqlite3.Row]:
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.execute(sql, params)
        return cur.fetchall()

def db_execute(sql: str, params: tuple = ()) -> int:
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute(sql, params)
        conn.commit()
        return cur.lastrowid

# Initialize DB
db_init()

# -------------------------
# FastAPI app
# -------------------------
app = FastAPI(title="Football Scouting App", version="0.1.0")

# Allow basic CORS (tweak for your domains)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Serve static & uploads
app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")
app.mount("/uploads", StaticFiles(directory=str(UPLOAD_DIR)), name="uploads")

# Common list of positions
POSITIONS = [
    "GK", "RB", "RWB", "CB", "LB", "LWB",
    "CDM", "CM", "CAM",
    "RM", "LM",
    "RW", "LW",
    "CF", "ST"
]

# -------------------------
# Routes (HTML)
# -------------------------
@app.get("/")
async def home(request: Request, q: Optional[str] = None, position: Optional[str] = None):
    sql = "SELECT * FROM videos"
    params: List[str] = []
    clauses: List[str] = []

    if q:
        clauses.append("(LOWER(player_name) LIKE ? OR LOWER(title) LIKE ? OR LOWER(description) LIKE ?)")
        like = f"%{q.lower()}%"
        params += [like, like, like]
    if position:
        clauses.append("position = ?")
        params.append(position)
    if clauses:
        sql += " WHERE " + " AND ".join(clauses)
    sql += " ORDER BY id DESC"

    rows = db_query(sql, tuple(params))
    videos = [dict(r) for r in rows]

    html = render_template(
        "index.html",
        request=request,
        videos=videos,
        positions=POSITIONS,
        q=q,
        position=position,
    )
    return html

@app.get("/upload")
async def upload_form(request: Request):
    html = render_template("upload.html", request=request, positions=POSITIONS)
    return html

MAX_VIDEO_SIZE = 200 * 1024 * 1024  # 200 MB
ALLOWED_MIME = {"video/mp4", "video/quicktime", "video/webm"}

@app.post("/upload")
async def upload_video(
    request: Request,
    player_name: str = Form(...),
    position: str = Form(...),
    title: str = Form(...),
    description: Optional[str] = Form(None),
    video: UploadFile = File(...),
):
    # Basic validations
    if position not in POSITIONS:
        raise HTTPException(status_code=400, detail="Invalid position")
    if video.content_type not in ALLOWED_MIME:
        raise HTTPException(status_code=400, detail="Unsupported video type. Use MP4/MOV/WEBM.")

    # Size check (requires reading the file). We'll stream to a temp then move.
    tmp_path = UPLOAD_DIR / f"tmp_{datetime.utcnow().timestamp()}_{video.filename}"
    size = 0
    with tmp_path.open("wb") as f:
        while True:
            chunk = await video.read(1024 * 1024)
            if not chunk:
                break
            size += len(chunk)
            if size > MAX_VIDEO_SIZE:
                f.close()
                tmp_path.unlink(missing_ok=True)
                raise HTTPException(status_code=400, detail="File too large (max 200MB)")
            f.write(chunk)

    # Persist with a safe unique filename
    safe_name = f"{int(datetime.utcnow().timestamp())}_{video.filename.replace(' ', '_')}"
    final_path = UPLOAD_DIR / safe_name
    shutil.move(str(tmp_path), final_path)

    created_at = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")

    vid_id = db_execute(
        "INSERT INTO videos (player_name, position, title, description, filename, created_at) VALUES (?, ?, ?, ?, ?, ?)",
        (player_name.strip(), position, title.strip(), (description or '').strip(), safe_name, created_at),
    )

    return RedirectResponse(url=f"/videos/{vid_id}", status_code=HTTP_302_FOUND)

@app.get("/videos/{video_id}")
async def video_detail(request: Request, video_id: int):
    rows = db_query("SELECT * FROM videos WHERE id = ?", (video_id,))
    if not rows:
        raise HTTPException(status_code=404, detail="Video not found")
    video = dict(rows[0])
    html = render_template("video.html", request=request, video=video)
    return html

# -------------------------
# Simple JSON API (optional)
# -------------------------
@app.get("/api/videos")
async def api_list(q: Optional[str] = None, position: Optional[str] = None):
    sql = "SELECT * FROM videos"
    params: List[str] = []
    clauses: List[str] = []

    if q:
        clauses.append("(LOWER(player_name) LIKE ? OR LOWER(title) LIKE ? OR LOWER(description) LIKE ?)")
        like = f"%{q.lower()}%"
        params += [like, like, like]
    if position:
        clauses.append("position = ?")
        params.append(position)
    if clauses:
        sql += " WHERE " + " AND ".join(clauses)
    sql += " ORDER BY id DESC"

    rows = db_query(sql, tuple(params))
    return [dict(r) for r in rows]

@app.get("/api/videos/{video_id}")
async def api_detail(video_id: int):
    rows = db_query("SELECT * FROM videos WHERE id = ?", (video_id,))
    if not rows:
        raise HTTPException(status_code=404, detail="Video not found")
    return dict(rows[0])

# -------------------------
# Healthcheck
# -------------------------
@app.get("/health")
async def health():
    return {"status": "ok"}
